/* c--r-b stands for component--rotating-button. */
/* Proposal: components be created by having a 
namespacing DOM element with a prefix 'c--' 
standing for component. TODO: correct for the 
hover-is-enabled situation for touch devices. */
body.test * {
    box-shadow: 0 0 0 1px inset;
}
.c--r-b {
    display: inline-block;
    position: relative;
}
.c--r-b > label {
    cursor: pointer; /* Ensure the hand icon is shown when hovering over labels. */
}
.c--r-b > .btn:enabled:focus {
    outline: 0;    
}
.c--r-b > .btn {
    display: inline-block;
    width: 72px;
    height: 72px;
    border-radius: 85px;
    line-height: 72px;
    font-size: 2rem;
    color: rgba(0,109,204,.95);
    padding: 0;
    cursor: pointer;
    margin: 0;
    font-family: ionicons;
    background-color: transparent;
    -webkit-user-select: none;
    text-align: center;
    box-sizing: border-box;
    border: 0;
    -webkit-tap-highlight-color: rgba(0,0,0,0);
}
.c--r-b::after {
    content: 'You must use a size class with this container class.';
}
.c--r-b.small::after, 
.c--r-b.medium::after, 
.c--r-b.large::after, 
.c--r-b.x-large::after,
.c--r-b.long::after {
    content: none; /* Clear the error message. */
}
.c--r-b.small {
    width: 72px; /* Empirical. */    
    height: 72px;
}
.c--r-b.medium {
    width: 100px;
    height: 100px;
}
.c--r-b.large {
    width: 100px;
    height: 100px;
}
.c--r-b.x-large {
    width: 100px;
    height: 100px;
}
.c--r-b.long {
    width: 72px;
    height: 72px;
}
.c--r-b.long.centered-label {
    width: 200px;
}
.c--r-b > .icon {
    position: absolute;
    display: inline-block;
    width: 100%;
    left: 0;
    font-family: helvetica-pro-light;
    color: rgba(0, 122, 255, 1);
    pointer-events: none;
    line-height: normal; /* Normal gives a better vertical centering on OSX. */
    text-align: center;
}
.c--r-b.long.centered-label > .icon {
    pointer-events: auto;
}
.c--r-b > .icon.black {
    color: black;
}
/* If the button is selected, then we do not want to change the icon font color on hover (we want it to stay white). */
body[data-hover-is-enabled='true'] .c--r-b > .btn:not([data-is-selected='true']):hover ~ .icon {
    color: #0063cc;
}
.c--r-b > .btn:active ~ .icon {
    color: #094e96;
}
.c--r-b > .btn[data-is-selected='true'] ~ .icon {
    border-radius: 5px;
    background-color: rgba(0,122,255,1);
    color: white;
}
body[data-hover-is-enabled='true'] .c--r-b > .btn[data-is-selected='true']:hover ~ .icon {
    background-color: #0063cc;
}
.c--r-b > .btn[data-is-selected='true']:active ~ .icon {
    background-color: #094e96 !important; /* Important to override the hover state without a complicated selector to improve specificity. */
}
.c--r-b > .icon.lower {
    pointer-events: auto;
}
/* This is because we have pointer events none set on the .icon, so we cannot detect hovering on the element itself. */
body[data-hover-is-enabled='true'] .c--r-b > .btn:hover ~ .icon:not(.ionicons) {
    text-decoration: underline;
}
body[data-hover-is-enabled='true'] .c--r-b > .icon.lower:hover {
    text-decoration: underline; 
}
.c--r-b.small > .icon {
    font-size: 1rem;    
    top: calc(50% - .5rem - 4px); /* 4px is to compensate for the padding. */
    padding: 4px 0;
}
.c--r-b.small > .icon.ionicons {
    font-size: 2rem;    
    top: calc(50% - 1rem);
}
.c--r-b.small > .icon.lower {
    font-size: .9rem;
    top: calc(100% - .65rem); /* Empirical. Repeated due to specificity. */
}
.c--r-b.medium > .icon {
    font-size: 1rem;
    top: calc(50% - .5rem);
}
.c--r-b.medium > .icon.lower {
    font-size: 1rem;
    top: calc(100% - .65rem); /* Empirical. Repeated due to specificity. */
}
.c--r-b.large > .icon {
    font-size: 1.2rem;
    top: calc(50% - .6rem);
}
.c--r-b.large > .icon.lower {
    font-size: 1.2rem;
    top: calc(100% - .65rem); /* Empirical. Repeated due to specificity. */
}
.c--r-b.x-large > .icon {
    font-size: 1.25rem;
    top: calc(50% - .625rem);
}
.c--r-b.x-large > .icon.lower {
    font-size: 1.25rem;
    top: calc(100% - .65rem); /* Empirical. Repeated due to specificity. */
}
.c--r-b.long > .icon {
    font-size: 2rem;
    top: calc(50% - 1rem);
}
/* Label for centered label covers the area taken by the containing box. */
.c--r-b.long.centered-label > .icon {
    font-size: 1rem;
    top: 0;
    height: 100%;
    line-height: 72px;
}
.c--r-b.long > .icon.lower {
    top: 0;
    height: 100%;
    line-height: 72px;
    left: -254px;
    font-size: 1.2rem;
    width: 254px;
    text-align: left;
    overflow: hidden;
    text-overflow: ellipsis;
    word-break: initial;
    white-space: nowrap;
    box-sizing: border-box; /* Enables convenient application of borders. */
}
.c--r-b.long.centered-label > .icon.lower {
    display: none;
}
.c--r-b > .btn + .focus-indicator {
    pointer-events: none;
}
.c--r-b > .btn:enabled:focus+.focus-indicator::after {
    content: ' ';
    display: block;
    background-color: transparent;
    box-shadow: 0 0 1px 1px rgba(0, 122, 255, .1) inset;
    position: absolute;
    right: -4px;
    bottom: -4px;
}
.c--r-b > .btn {
    left: 0;
    position: absolute;
}
.c--r-b.small > .btn {
    width: 72px;
    height: 72px;
    border-radius: 72px;
}
.c--r-b.medium > .btn, 
.c--r-b.large > .btn,
.c--r-b.x-large > .btn {
    width: 100px;
    height: 100px;
    border-radius: 100px;
}
.c--r-b.long.centered-label > .btn {
    left: calc(50% - 33px);
}
body[data-hover-is-enabled='true'] .c--r-b > .btn:hover::after {
    text-decoration: underline;
}
.c--r-b.small > .btn:enabled:focus+.focus-indicator::after,
.c--r-b.long > .btn:enabled:focus+.focus-indicator::after {
    width: 80px;
    height: 80px;
    border-radius: 80px;
}
.c--r-b.long.centered-label > .btn:enabled:focus+.focus-indicator::after {
    left: calc(50% - 37px);
}
.c--r-b.medium > .btn:enabled:focus+.focus-indicator::after, 
.c--r-b.large > .btn:enabled:focus+.focus-indicator::after,
.c--r-b.x-large > .btn:enabled:focus+.focus-indicator::after {
    width: 108px;
    height: 108px;
    border-radius: 108px;
}
.c--r-b > .btn.bordered {
    border: 1px solid rgba(0,122,255,1);
}
body[data-hover-is-enabled='true'] .c--r-b > .btn.bordered:not([data-is-waiting='true']):hover {
    border-color: #0063cc;
}
.c--r-b > .btn.bordered:not([data-is-waiting='true']):active {
    border-color: #094e96;
}
.c--r-b > .btn {
    -webkit-transition: border-color .1s ease-in-out;    
}
.c--r-b > .btn[data-is-waiting='true'] {
    border-color: rgba(0,0,0,0);
    box-shadow: 0 2px 0 2px rgba(0, 0, 0, .05) inset;
    -webkit-animation-duration: 2.5s;
    -webkit-animation-name: rotate;
    -webkit-animation-iteration-count: infinite;
    -webkit-animation-timing-function: ease-out-in;
}
.ionicons {
    font-family: ionicons !important;
}
@-webkit-keyframes rotate {
    0% {
        -webkit-transform: rotate(0);
    }
    100% {
        -webkit-transform: rotate(360deg);
    }
}
/*media queries must be on a single line to avoid safari bug*/
@media only screen and (min-device-width: 768px) and (max-device-width: 1024px) {
    .c--r-b > .btn, .lbl {
        /*delay on border-color avoids a flash during the interval between resetting the is-waiting flag on waiting buttons*/
        transition: border-color 0.1s ease-out .2s, box-shadow .3s ease-out, border-left-width .2s ease-out;
    }

    .radio:enabled + .lbl:active, .btn:enabled:active, a.btn:not(.disabled):active {
        box-shadow: none; /* touch start and end events take care of this*/
    }
}